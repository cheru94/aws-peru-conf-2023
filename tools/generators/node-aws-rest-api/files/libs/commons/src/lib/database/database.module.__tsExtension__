/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/no-explicit-any */
import { DynamicModule, Module } from '@nestjs/common';
import { ConfigModule, ConfigService } from '@nestjs/config';
import { TypeOrmModule, TypeOrmModuleOptions } from '@nestjs/typeorm';
import { loadModuleConfig } from './load-module-config';

@Module({})
export class DatabaseModule {

  static registry(env: any): DynamicModule {
    return {
      module: DatabaseModule,
      imports: [ConfigModule.forRoot({
        isGlobal: false,
        load: [() => loadModuleConfig(env)],
      }),
      TypeOrmModule.forRootAsync({
        useFactory: (configService: ConfigService) => {
          const config = configService.get('useDatabaseFactory');
          return config();
        },
        imports: [ConfigModule],
        inject: [ConfigService]
      }),
      ],
      providers: [
      ]

    }
  }
}
