import * as pulumi from '@pulumi/pulumi';
import * as aws from '@pulumi/aws';
import * as awsx from '@pulumi/awsx';

const appName = '<%=name%>';
const directory = '<%=directory%>';

const config = new pulumi.Config();
const NODE_ENV = config.require('NODE_ENV');

async function init() {
 
 await containerECSFargate();
}

 init();


async function containerECSFargate() {


  const configLoadBalancer: awsx.lb.ApplicationLoadBalancerArgs = {
    defaultTargetGroup: {
      port: 3333,
      healthCheck: {
        path: '/api/health',
      }
    },
  };

  const lb = new awsx.lb.ApplicationLoadBalancer(`${appName}-alb-${NODE_ENV}`, configLoadBalancer);


  const repository = new awsx.ecr.Repository(`${appName}-ecr-repository-${NODE_ENV}`);


  const imageArgs: awsx.ecr.ImageArgs = {
    path: "./../../",
    dockerfile: `./../${directory}/${appName}/Dockerfile`,
    args: {
      NODE_ENV,
    },
    repositoryUrl: repository.url,
  };


  const dockerImage = new awsx.ecr.Image(`${appName}-ecr-image-${NODE_ENV}`, imageArgs);

  // Define the Log Group Creator IAM
  const logGroupCreatorPolicy = new aws.iam.Policy(`${appName}-logGroupCreatorPolicy-${NODE_ENV}`, {
    policy: JSON.stringify({
      Version: "2012-10-17",
      Statement: [{
        Action: [
          "*"
        ],
        Effect: "Allow",
        Resource: "*"
      }]
    })
  });

  // Create a new Role
  const ecsRole = new aws.iam.Role(`${appName}-ecsRole-${NODE_ENV}`, {
    assumeRolePolicy: JSON.stringify({
      Version: "2012-10-17",
      Statement: [{
        Action: "sts:AssumeRole",
        Principal: {
          Service: "ecs-tasks.amazonaws.com",
        },
        Effect: "Allow",
      }],
    }),
  });

  // Attach the log creator policy to the role
  new aws.iam.RolePolicyAttachment(`${appName}-rolePolicyAttachment-${NODE_ENV}`, {
    role: ecsRole.name,
    policyArn: logGroupCreatorPolicy.arn,
  });

  const executionECSRole = {
    roleArn: ecsRole.arn,
  };

  const taskRole = {
    roleArn: ecsRole.arn,
  }

  const cluster = new aws.ecs.Cluster(`${appName}-cluster-ecs-${NODE_ENV}`, {});

  const service = new awsx.ecs.FargateService(`${appName}-fargate-service-${NODE_ENV}`, {
    cluster: cluster.arn,
    assignPublicIp: true,
    desiredCount: 1,
    taskDefinitionArgs: {
      taskRole: taskRole,
      executionRole: executionECSRole,
      containers: {
        app: {
          name: `${appName}-fargate-task-${NODE_ENV}`,
          image: dockerImage.imageUri,
          cpu: 512,
          memory: 1024,
          essential: true,
          portMappings: [{
            containerPort: 3333,
            hostPort: 3333,
            targetGroup: lb.defaultTargetGroup,
          }],
          logConfiguration: {
            logDriver: "awslogs",
            options: {
              "awslogs-create-group": "true",
              "awslogs-group": `${appName}-logs-group-${NODE_ENV}`,
              "awslogs-region": "us-east-1",
              "awslogs-stream-prefix": `${appName}-ecs-logs-${NODE_ENV}`
            }
          }
        }
      },
    },

  });

  exports.dnsName = pulumi.interpolate`${lb.loadBalancer.dnsName}`;
}